//Math.random();
//React and ReactDOM
//JSX
//ES2015+



//document.getElementById('mountNode').innerHTML = 'Hello!!'

function Hello(){
  return <div>Hello Hello React</div>
}


--------------------------
Always use COMPONENT nameing starting from UPPERCASE otherwise it thinks it is a html given to render.
component: Button
html: button

ReactDOM.render(
<Hello/>, document.getElementById('mountNode')
);

function Button(){
  return <button>TEST</button>
}

ReactDOM.render(
<Button/>, document.getElementById('mountNode')
);

------------------------Button with State--------------------
function Button(){
  const[counter, setCounter] = useState(1);
  return <button onClick={() => setCounter(counter+1)}>{counter}</button>
}

ReactDOM.render(
<Button/>, document.getElementById('mountNode')
);

-------------------------handleClick------------------------------------
function Button(){
  const[counter, setCounter] = useState(5);
  
  //handleClick must be inside Button() to use counter variable.
  const handleClick = () => setCounter(counter*2)
  //returning a function call.
  return (<button onClick={handleClick}>
      {counter}
    </button>)
}

ReactDOM.render(
<Button/>, document.getElementById('mountNode')
);
--------------------------Parent-Child component communication---- jsdrops.com/rgs1.4------------

ReactDOM.render(
  //each of these will betranstaled to function call.
  //make these react element the children of another react element.
  //<><Button/><Display/></>, document.getElementById('mountNode') >>> <> </>: <React.Fragment> </React.Fragment>
<App/>, document.getElementById('mountNode')
);

function App(){
  const[counter, setCounter] = useState(5);
  const incrementCounter = () => setCounter(counter*2);
  return (<div>
            <Button onClickFunction={incrementCounter}/>
            <Display message={counter}/>
          </div>);
  
}

function Button(props){
  //handleClick must be inside Button() to use counter variable.
  //const handleClick = () => setCounter(counter*2)
  //returning a function call.
  return (<button onClick={props.onClickFunction}>
      *2
    </button>)
}

function Display(props){
  return (<div>{props.message}</div>);
}

-----------------------------------------------Component-Reusability------------jsdrops.com/rgs1.6---------------

ReactDOM.render(
  //each of these will betranstaled to function call.
  //make these react element the children of another react element.
  //<><Button/><Display/></>, document.getElementById('mountNode') >>> <> </>: <React.Fragment> </React.Fragment>
<App/>, document.getElementById('mountNode')
);

function App(){
  const[counter, setCounter] = useState(5);
  const incrementCounter = (incrementValue) => setCounter(counter*incrementValue);
  return (<div>
            <Button onClickFunction={incrementCounter} increment={1}/>
            <Button onClickFunction={incrementCounter} increment={5}/>
            <Button onClickFunction={incrementCounter} increment={10}/>
            <Display message={counter}/>
          </div>);
  
}

function Button(props){
  //handleClick must be inside Button() to use counter variable.
  const handleClick = () => props.onClickFunction(props.increment)
  //returning a function call.
  return (
    <button onClick={handleClick}>
      *{props.increment}
    </button>)
}

function Display(props){
  return (<div>{props.message}</div>);
}
--------------------------------------------------Scopes---------------https://jscomplete.com/playground/scopes------
1. var don't leak outside function scope but it leaks outside block scope.

for (var i = 1; i <= 10; i++) {
  // Block Scope
}
i
o/p: 11

2. So we use let, const that don't leak outside block
{
  {
  //nested block scope
  //let, const
  }
}

----------------------------const-----------------------------
* constant reference
You cannot change const variable if string or interger assigned, in this case its like immutable object.
But if array or object assigned then its a mutable object. 


//Error 
const ans1 = 42;
ans1 = 433

//Works
const person = {
  firstname: 'John',
  lastName: 'Doe'
};
person.firstname = 'Matt'
person.firstname
-----------------------------------------------------------



