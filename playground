//Math.random();
//React and ReactDOM
//JSX
//ES2015+



//document.getElementById('mountNode').innerHTML = 'Hello!!'

function Hello(){
  return <div>Hello Hello React</div>
}


--------------------------
Always use COMPONENT nameing starting from UPPERCASE otherwise it thinks it is a html given to render.
component: Button
html: button

ReactDOM.render(
<Hello/>, document.getElementById('mountNode')
);

function Button(){
  return <button>TEST</button>
}

ReactDOM.render(
<Button/>, document.getElementById('mountNode')
);

------------------------Button with State--------------------
function Button(){
  const[counter, setCounter] = useState(1);
  return <button onClick={() => setCounter(counter+1)}>{counter}</button>
}

ReactDOM.render(
<Button/>, document.getElementById('mountNode')
);

-------------------------handleClick------------------------------------
function Button(){
  const[counter, setCounter] = useState(5);
  
  //handleClick must be inside Button() to use counter variable.
  const handleClick = () => setCounter(counter*2)
  //returning a function call.
  return (<button onClick={handleClick}>
      {counter}
    </button>)
}

ReactDOM.render(
<Button/>, document.getElementById('mountNode')
);
--------------------------Parent-Child component communication---- jsdrops.com/rgs1.4------------

ReactDOM.render(
  //each of these will betranstaled to function call.
  //make these react element the children of another react element.
  //<><Button/><Display/></>, document.getElementById('mountNode') >>> <> </>: <React.Fragment> </React.Fragment>
<App/>, document.getElementById('mountNode')
);

function App(){
  const[counter, setCounter] = useState(5);
  const incrementCounter = () => setCounter(counter*2);
  return (<div>
            <Button onClickFunction={incrementCounter}/>
            <Display message={counter}/>
          </div>);
  
}

function Button(props){
  //handleClick must be inside Button() to use counter variable.
  //const handleClick = () => setCounter(counter*2)
  //returning a function call.
  return (<button onClick={props.onClickFunction}>
      *2
    </button>)
}

function Display(props){
  return (<div>{props.message}</div>);
}

-----------------------------------------------Component-Reusability------------jsdrops.com/rgs1.6---------------

ReactDOM.render(
  //each of these will betranstaled to function call.
  //make these react element the children of another react element.
  //<><Button/><Display/></>, document.getElementById('mountNode') >>> <> </>: <React.Fragment> </React.Fragment>
<App/>, document.getElementById('mountNode')
);

function App(){
  const[counter, setCounter] = useState(5);
  const incrementCounter = (incrementValue) => setCounter(counter*incrementValue);
  return (<div>
            <Button onClickFunction={incrementCounter} increment={1}/>
            <Button onClickFunction={incrementCounter} increment={5}/>
            <Button onClickFunction={incrementCounter} increment={10}/>
            <Display message={counter}/>
          </div>);
  
}

function Button(props){
  //handleClick must be inside Button() to use counter variable.
  const handleClick = () => props.onClickFunction(props.increment)
  //returning a function call.
  return (
    <button onClick={handleClick}>
      *{props.increment}
    </button>)
}

function Display(props){
  return (<div>{props.message}</div>);
}
--------------------------------------------------Scopes---------------https://jscomplete.com/playground/scopes------
1. var don't leak outside function scope but it leaks outside block scope.

for (var i = 1; i <= 10; i++) {
  // Block Scope
}
i
o/p: 11

2. So we use let, const that don't leak outside block
{
  {
  //nested block scope
  //let, const
  }
}

----------------------------const-----------------------------
* constant reference
You cannot change const variable if string or interger assigned, in this case its like immutable object.
But if array or object assigned then its a mutable object. 


//Error 
const ans1 = 42;
ans1 = 433

//Works
const person = {
  firstname: 'John',
  lastName: 'Doe'
};
person.firstname = 'Matt'
person.firstname
--------------arrow-vs-regular-functions-----------https://jscomplete.com/playground/arrow-vs-regular-functions-----
///////////////////////syntax//////////
const x = function(){  
};

const y = () =>{};

////Difference///////////////////
console.log(this);

const testerObj = {
  
  fun1: function(){
    console.log('fun1',this);
  },
  
  fun2: () => {console.log('fun2',this);}
  
};

testerObj.fun1(); // prints whole testerObj, the caller of function
testerObj.fun2(); // The value of the "this" keyword inside an arrow function depends on WHERE the function was DEFINED (the SCOPE that defined the function). same as console.log(this);

---------------shorthand------------
//////////shorthand//////////
const square1 = (a) => {return a*a};
const square2 = a => a*a;
console.log(square1(2)); //4
console.log(square2(2)); //4

---------creating object, dynamic prop-------https://jscomplete.com/playground/object-literals---------

const mystery = 'answer';
const InverseOfPI = 1 / Math.PI;

const obj = {
	p1: 10,
  p2: 20,
  f1() {},
  f2: () => {},
  [mystery]: 42, //dynamic prop
  InverseOfPI, // InverseOfPI: InverseOfPI
};

console.log(obj);
------------------------Destructuring and Rest/Spread-------------------------------------


---------------------Destrucruring----------------
 const circle = {
   label: 'circleX',
   radius: 2,
 };

 const circleArea = ({radius}, {precision = 2} = {}) =>
   (PI * radius * radius).toFixed(precision);

 console.log(
   circleArea(circle, { precision: 5 })
 );

-------------------Rest-Spread----https://jsdrops.com/rest-spread-----------

const [first, ...restOfItems] = [10, 20, 30, 40];

 console.log(first);
//10 
 console.log(restOfItems);
// Array(3) [ 20, 30, 40 ]
const data = {
	temp1: '001',
  temp2: '002',
  firstName: 'John',
  lastName: 'Doe',
};

const {temp1, temp2, ...person} = data;

console.log('Person',person);
//Person > Object { firstName: "John", lastName: "Doe" }

const newArray = [...restOfItems];

const newObject = {
  ...person
}

console.log('NewObject',newObject);
//NewObject > Object { firstName: "John", lastName: "Doe" }


-----------------------------Template-strings-----https://jscomplete.com/playground/template-strings-------

const greeting = "Hello World";

const answer = 'Forty Two';

const html = `
  <div>
    ${Math.random()}
  </div>
`;

html

-----------------------------------Classes------https://jscomplete.com/playground/classes--------------------------------------

class Person{
  constructor(name){
    this.name = name;
  }
  
  gree(){
    console.log(`Name is ${this.name}`)
  }
}

class Student extends Person{
  constructor(name,level){
    super(name);
    this.level = level;
  }
  
  gree(){
    console.log(`Name is ${this.name} and level is ${this.level}`)
  }
}

const p1 = new Person("Person");
const s1 = new Student('Student', 'Beginner');
const s2 = new Student('Student', 'Beginner');

//////////Override Inline////////////
s2.gree = () => console.log(`Special override`)

p1.gree(); //Name is Person
s1.gree(); //Name is Student and level is Beginner
s2.gree(); //Special override

-------------------Async/Await-------------------
// const fetchData = () => {
//   fetch('https://api.github.com').then(resp => {
//     resp.json().then(data => {
//       console.log(data);
//     });
//   });
// };

const fetchData = async () => {
  const resp = await fetch('https://api.github.com');
  const data = await resp.json();
  console.log(data);
};

fetchData();

---------------------React Class Component (Github Cards App)--------------------------------
class Card extends React.Component{
  render(){
       return(
    	       <div className="github-profile">
    	         <img src="https://placehold.it/75" />
               <div className="info">
                 <div className="name">Name here...</div>
                 <div className="company">Company here...</div>
               </div>
    	       </div>
             );
          }
}


class App extends React.Component{
  render(){
             return (
                      <div>
                          <div className="header">{this.props.title}</div>
                          <Card/>
                       </div>
                     )
          }
}
// const App = ({title}) => (
//   <div className="header">{title}</div>
// );

ReactDOM.render(
	<App title="The GitHub Cards App" />,
  mountNode,
);


----------------------------------------React-Style-https://jscomplete.com/playground/react-style----------------------------------------------
https://jscomplete.com/playground/react-style

class ConditionalStyle extends React.Component {
	render() {
  	return (
    	<div style={{ color: Math.random() <= 0.5 ? 'green': 'red' }}>
    	  How do you like this?
    	</div>
    );
  }	
}

ReactDOM.render(
	<ConditionalStyle />,
  mountNode,
);
--------------------------------Working with data----------https://jscomplete.com/playground/rgs2.4-----------
	const testData = [
			{name: "Dan Abramov", avatar_url: "https://avatars0.githubusercontent.com/u/810438?v=4", company: "@facebook"},
      {name: "Sophie Alpert", avatar_url: "https://avatars2.githubusercontent.com/u/6820?v=4", company: "Humu"},
  		{name: "Sebastian MarkbÃ¥ge", avatar_url: "https://avatars2.githubusercontent.com/u/63648?v=4", company: "Facebook"},
	];

const CardList= (props) => (
<div>
  <Card {...testData[0]}/>
  <Card {...testData[1]}/>
  ------------------------------------------------
  {testData.map(data => <Card {...data}/>)}
</div>
);

// [<Card/>,<Card/>,<Card/>]
// [React.createelement(), React.createelement(), React.createelement()]

class Card extends React.Component {
	render() {
    const profile = this.props;
    console.log(profile);
  	return (
    	<div className="github-profile">
      <img src={profile.avatar_url} />
        <div className="info">
          <div className="name">{profile.name}</div>
          <div className="company">{profile.company}...</div>
        </div>
    	</div>
    );
  }
}

class App extends React.Component {
	render() {
  	return (
    	<div>
    	  <div className="header">{this.props.title}</div>
        <CardList />
    	</div>
    );
  }	
}

ReactDOM.render(
	<App title="The GitHub Cards App" />,
  mountNode,
);
----------------------------------------------------------------------------

